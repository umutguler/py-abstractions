name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  details:
    name: Extract Version Details
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.package_info.outputs.package_name }}
      new_version: ${{ steps.extract.outputs.new_version }}
      tag_name: ${{ steps.extract.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v2

      - name: Extract tag and version details
        id: extract
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            # For a tag like "v0.1.0", remove the leading "v"
            NEW_VERSION=${TAG_NAME#v}
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            echo "Extracted version: $NEW_VERSION"
          else
            echo "No tag found"
            exit 1
          fi

      - name: Set up Python for Details
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache: "poetry"

      - name: Get package name from Poetry
        id: package_info
        run: |
          package_info=$(poetry version)
          PACKAGE_NAME=$(echo $package_info | awk '{print $1}')
          echo "Package name: $PACKAGE_NAME"
          echo "package_name=$PACKAGE_NAME" >> "$GITHUB_OUTPUT"

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          PACKAGE_NAME=${{ needs.details.outputs.package_name }}
          response=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/json || echo "{}")
          latest_version=$(echo $response | grep -oP '"releases":\{"\K[^"]+' | sort -rV | head -n 1)
          if [ -z "$latest_version" ]; then
            echo "Package not found on PyPI."
            latest_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_version"
          echo "latest_version=$latest_version" >> $GITHUB_ENV

      - name: Compare versions and exit if not newer
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  setup_and_build:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python for Build
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          cache: "poetry"

      - name: Update version in pyproject.toml
        run: |
          VERSION=${{ needs.details.outputs.new_version }}
          echo "Updating version in pyproject.toml to $VERSION"
          sed -i.bak -E "s/version = \"[0-9]+\.[0-9]+\.[0-9]+\"/version = \"$VERSION\"/" pyproject.toml

      - name: Install dependencies with Poetry
        run: poetry install --sync --no-interaction

      - name: Build distributions with Poetry
        run: poetry build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Publish Package to PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment:
      name: release
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
      - name: Publish distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  github_release:
    name: Create GitHub Release
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ./dist/
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.details.outputs.tag_name }}
          release_name: "Release ${{ needs.details.outputs.new_version }}"
          body: "Automated release of version ${{ needs.details.outputs.new_version }}"
          draft: false
          prerelease: false
